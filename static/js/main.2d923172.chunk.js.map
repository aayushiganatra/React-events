{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ColorButton","withStyles","theme","root","position","borderRadius","marginLeft","Button","useStyles","makeStyles","width","maxWidth","backgroundColor","palette","background","paper","inline","display","App","useState","listOfEvents","setlistOfEvents","categories","setcategories","currentCategory","setcurrentCategory","isGrid","setisGrid","classes","ViewEvents","e","index","console","log","style","float","CardDeck","Card","Img","variant","src","thumb_url","Body","Title","eventname_raw","Text","venue","full_address","color","href","tickets","ticket_url","target","size","event_url","className","List","ListItem","alignItems","ListItemAvatar","Avatar","alt","ListItemText","primary","secondary","Fragment","Typography","component","Divider","useEffect","fetch","then","response","json","ToggleButtonGroup","exclusive","aria-label","ToggleButton","value","onClick","map","c","margin","fontSize","category","url","item","getEvents","toUpperCase","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d923172.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./App.css\";\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    position: \"relative\",\n    borderRadius: \"8px\",\n    marginLeft: \"20px\",\n  },\n}))(Button);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: \"36ch\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: \"inline\",\n  },\n}));\n\nfunction App() {\n  const [listOfEvents, setlistOfEvents] = useState([]);\n  const [categories, setcategories] = useState([]);\n  const [currentCategory, setcurrentCategory] = useState(\"\");\n  const [isGrid, setisGrid] = useState(true);\n  const classes = useStyles();\n\n  useEffect(() => {\n    fetch(\"https://allevents.s3.amazonaws.com/tests/categories.json\")\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n        setcategories(response);\n        console.log(\"Inside category events call...\");\n      });\n  }, []);\n\n  const getEvents = (category) => {\n    let url = \"https://allevents.s3.amazonaws.com/tests/all.json\";\n\n    if (category === \"all\")\n      url = \"https://allevents.s3.amazonaws.com/tests/all.json\";\n    else if (category === \"music\")\n      url = \"https://allevents.s3.amazonaws.com/tests/music.json\";\n    else if (category === \"business\")\n      url = \"https://allevents.s3.amazonaws.com/tests/business.json\";\n    else if (category === \"sports\")\n      url = \"https://allevents.s3.amazonaws.com/tests/sports.json\";\n    else url = \"https://allevents.s3.amazonaws.com/tests/workshops.json\";\n\n    console.log(category);\n    fetch(url)\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n        console.log(response.item);\n\n        setlistOfEvents(response.item);\n        console.log(\"Inside getting events call...\");\n      });\n  };\n  \n  const handleViewGrid = () => {\n    setisGrid(true);\n  };\n\n  const handleViewList = () => {\n    setisGrid(false);\n  };\n\n  function ViewEvents(e, index) {\n    console.log(isGrid);\n\n    if (!isGrid) {\n      return (\n        <div key={index} className=\"listview\">\n          <List className=\"MuiList-root makeStyles-root-1 MuiList-padding\">\n            <ListItem alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar alt=\"Remy Sharp\" src={e.thumb_url} />\n              </ListItemAvatar>\n              <ListItemText\n                primary={e.eventname_raw}\n                secondary={\n                  <React.Fragment>\n                    <Typography\n                      component=\"span\"\n                      variant=\"body2\"\n                      className={classes.inline}\n                      color=\"textPrimary\"\n                    ></Typography>\n                    {e.venue.full_address}\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      href={e.tickets.ticket_url}\n                      target=\"_blank\"\n                    >\n                      Tickets\n                    </Button>\n                    <Button\n                      size=\"small\"\n                      color=\"primary\"\n                      href={e.event_url}\n                      target=\"_blank\"\n                    >\n                      Learn More\n                    </Button>\n                  </React.Fragment>\n                }\n              />\n            </ListItem>\n            <Divider variant=\"inset\" component=\"li\" />\n          </List>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          style={{ width: \"18rem\", float: \"left\", display: \"table\" }}\n          key={index}\n        >\n          <CardDeck>\n            <Card>\n              <Card.Img variant=\"top\" src={e.thumb_url} />\n              <Card.Body>\n                <Card.Title>Event: {e.eventname_raw}</Card.Title>\n                <Card.Text>Venue Details: {e.venue.full_address}</Card.Text>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  href={e.tickets.ticket_url}\n                  target=\"_blank\"\n                >\n                  Tickets\n                </Button>\n                <Button\n                  size=\"small\"\n                  color=\"primary\"\n                  href={e.event_url}\n                  target=\"_blank\"\n                >\n                  Learn More\n                </Button>\n              </Card.Body>\n            </Card>\n          </CardDeck>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"event_categories\">\n        <ToggleButtonGroup exclusive aria-label=\"text alignment\">\n          <ToggleButton\n            value=\"list\"\n            aria-label=\"list\"\n            className=\"list\"\n            onClick={handleViewList}\n          >\n            <ViewListIcon />\n          </ToggleButton>\n          <ToggleButton\n            value=\"module\"\n            aria-label=\"module\"\n            className=\"module\"\n            onClick={handleViewGrid}\n          >\n            <ViewModuleIcon />\n          </ToggleButton>\n        </ToggleButtonGroup>\n\n        {categories.map((c) => (\n          <ColorButton\n            style={{ margin: \"30px\", fontSize: \"15px\" }}\n            key={c.category}\n            className=\"event_buttons\"\n            color=\"primary\"\n            variant=\"contained\"\n            target=\"_blank\"\n            onClick={() => {\n              getEvents(c.category);\n              setcurrentCategory(c.category);\n            }}\n          >\n            {c.category}\n          </ColorButton>\n        ))}\n      </div>\n      <br />\n      <h1 className=\"current_event\">{currentCategory.toUpperCase()} Events </h1>\n\n      {listOfEvents.map((e, index) => (\n        <div>{ViewEvents(e, index)}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}